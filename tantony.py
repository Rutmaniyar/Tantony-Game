# -*- coding: utf-8 -*-
"""Tantony

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qmmvLOpVNanhsmmGrq9fBqNY_2lXyqLa
"""

import random

class Card:
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank

    def __repr__(self):
        return f"{self.rank} of {self.suit}"

class Deck:
    def __init__(self):
        suits = ["Hearts", "Diamonds", "Spades", "Clubs"]
        ranks = ["Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King"]
        self.deck = [Card(suit, rank) for suit in suits for rank in ranks]

    def shuffle(self):
        random.shuffle(self.deck)
        
    def draw(self):
        return self.deck.pop()


def get_points(card):
    rank_points = {"Ace": 14, "King": 13, "Queen": 12, "Jack": 11, "10": 10,
                   "9": 9, "8": 8, "7": 7, "6": 6, "5": 5, "4": 4, "3": 3, "2": 2}
    return rank_points[card.rank]

def get_winning_card(card1, card2, card3, card4):
    cards = [card1, card2, card3, card4]
    points = [get_points(card) for card in cards]
    max_point = max(points)
    winning_card = cards[points.index(max_point)]
    print(f"Winning card: {winning_card}")
    
    min_point = min(points)
    runt_card = cards[points.index(min_point)]
    print(f"Runt card: {runt_card}")

class Hand:
    def __init__(self, deck, cards_per_hand):
        self.hand = [deck.draw() for _ in range(cards_per_hand)]

    def __repr__(self):
        return str(self.hand)

deck = Deck()
deck.shuffle()

num_cards = int(input("Enter the number of cards per hand (12 or 13): "))

if num_cards == 12:
    for card in deck.deck:
        if card.rank in {"7", "8", "9", "10"}:
            deck.deck.remove(card)
    hand1 = Hand(deck, num_cards)
    hand2 = Hand(deck, num_cards)
    hand3 = Hand(deck, num_cards)
else:
    hand1 = Hand(deck, num_cards)
    hand2 = Hand(deck, num_cards)
    hand3 = Hand(deck, num_cards)
    hand4 = Hand(deck, num_cards)

print(hand1)
print(hand2)
print(hand3)
if num_cards == 13:
    print(hand4)

 
class trick:
    def __init__(self, RuntValue, TrickCards, PlayerTurn):
        self.TrickAssignedTo= Player.PlayerID
        self.RuntValue = RuntValue
        self.TrickCards = TrickCards
        self.PlayerTurn = PlayerTurn

    def assign_trick(player,TrickCards):
        player1 = Player()
        if(len(player1.TrickInHand) <= 3):
            player1.TrickInHand.append(TrickCards)
            Trick = trick('123',trick_cards,player)
            print('Tricks In Hand',player1.TrickInHand)
            print('Players Turn',Trick.PlayerTurn)
        else:
            print("The Player already has three tricks in his hand Can't be assigned to this player")

    def keeping_trick(player,TrickCards):
        player = Player()
        if(len(player.TrickInHand) <= 3):
            player.TrickInHand.append(TrickCards)
            print(player.TrickInHand)
            trick.PlayerTurn = player
        else:
            print("The Player already has three tricks in his hand Can't be assigned to this player")

# def calculating_score():
    

class Player:
    FullName = ""
    PlayerID = "2"
    TrickInHand = []

trick_cards = ["Ace of Spades","Three of Spades","Eight of Spades","Ten of Spades"]
trick.assign_trick(player="P2",TrickCards=trick_cards)

class Score:
    Team= ""
    RoundScoreValue= ""
    TotalScoreValue= ""
